#!/usr/bin/gawk -f
#
# USAGE
#
#   groupby [AWK-OPTIONS] <group-col1,groupcol2,...> <agg-col> <sum|concat|count>...
#
# DESCRIPTION
#
#   Shell groupby filter. Combines all lines with the same key (<group-col>)
#   by aggregating <agg-col> with <aggregator>. Aggregator can be: count
#   concat, sum. Multi-column keys are specified by separating the column
#   indexes with commas. For example: '1,4,5'.
#
#   Requires gawk (because of indirect calls).
#
# EXAMPLES
#
#     $ { echo "adam 5" ; echo "kathy 3" ; echo "adam 7" } | groupby 1 2 count
#     kathy 1
#     adam 2
#
#     $ { echo "adam 5" ; echo "kathy 3" ; echo "adam 7" } | groupby 1 2 concat
#     kathy 3
#     adam 5 7
#
#     $ { echo "adam 5" ; echo "kathy 3" ; echo "adam 7" } | groupby 1 2 sum
#     kathy 3
#     adam 12
#
#   Group by the first two columns and sum the last column:
#
#     $ printf "10:50 mike 49\n10:30 lisa 1\n10:50 mike 100" | groupby 1,2 3 sum
#     10:30 lisa 1
#     10:50 mike 149
#
#   Calculate the average for each group by aggregating with sum and count, then
#   doing a second pass (avg = sum / count).
#
#     $ { echo "adam 5" ; echo "kathy 3" ; echo "adam 7" } |
#         groupby 1 2 sum count |
#         awk '{print $1, $2/$3}'
#     kathy 3
#     adam 6


function count(acc, val) {
  return acc + 1
}

function sum(acc, val) {
  return acc + val
}

function concat(acc, val) {
  return acc val " "
}

BEGIN {
  if (ARGC < 4) {
    print "Usage: groupby [AWK-OPTIONS] <group-col1,group-col2,...> <agg-col1,agg-col2,...> <sum|concat|count...>" > "/dev/stderr"
    exit(1)
  }
  groupcol = ARGV[1]
  if (groupcol ~ /,/) {
    ngroupcols = split(groupcol, groupcols, ",")
  }
  aggcol = ARGV[2]
  if (aggcol ~ /,/) {
    naggcols = split(aggcol, aggcols, ",")
  }

  aggregators[0] = ARGV[3]
  for (i = 4; i < ARGC; i++) {
    aggregators[i-3] = ARGV[i]
    ARGV[i] = ""
  }
  ARGV[1] = "-"
  ARGV[2] = ""
  ARGV[3] = ""
}

# Grouping on multiple columns, aggregating on multiple columns (slowest).
ngroupcols && naggcols {
  key = $groupcols[1]
  for (i = 2 ; i <= ngroupcols ; i++) {
    key = key OFS $groupcols[i]
  }
  agg = $aggcols[1]
  for (i = 2 ; i <= naggcols ; i++) {
    agg = agg OFS $aggcols[i]
  }
  for (i in aggregators) {
    aggregator = aggregators[i]
    arr[key][i] = @aggregator(arr[key][i], agg)
  }
  next
}

# Grouping on multiple columns, aggregating on a single column.
ngroupcols {
  key = $groupcols[1]
  for (i = 2 ; i <= ngroupcols ; i++) {
    key = key OFS $groupcols[i]
  }
  for (i in aggregators) {
    aggregator = aggregators[i]
    arr[key][i] = @aggregator(arr[key][i], $aggcol)
  }
  next
}

naggcols {
  agg = $aggcols[1]
  for (i = 2 ; i <= naggcols ; i++) {
    agg = agg OFS $aggcols[i]
  }
  for (i in aggregators) {
    aggregator = aggregators[i]
    arr[$groupcol][i] = @aggregator(arr[$groupcol][i], agg)
  }
  next
}

# Grouping on a single column (faster).
{
  for (i in aggregators) {
    aggregator = aggregators[i]
    arr[$groupcol][i] = @aggregator(arr[$groupcol][i], $aggcol)
  }
}

END {
  for (key in arr) {
    printf key
    for (agg in arr[key]) {
      printf(" %s", arr[key][agg])
    }
    print ""
  }
}

#!/bin/bash
#
# USAGE
#
#   rfc3339 <time-description>
#
# DESCRIPTION
#
#   Tiny shim that allows you to enter some unspecific format accepted by
#   date(1) and output it as a RFC3339 timestamp.
#
# EXAMPLE
#
#     $ rfc3339 1 week ago
#     2017-02-13 16:21:49+01:00
#
#     $ rfc3339 5 years
#     2022-02-20 16:22:24+01:00
#
#     $ rfc3339 5 years ago
#     2012-02-20 16:22:54+01:00


if (( $# != 0 )) ; then
    # date(1) does _not_ recognize PT for Pacific Time. It does recognize PST
    # and PDT. Unfortunately, I often forget which one of the two it currently
    # is, and it would be far safer for me to just specify PT. The following is
    # a hack. If PT is specified, remove it and set the TZ environment variable
    # to US/Pacific. The PT needs to be removed because date(1) really doesn't
    # like setting the TZ variable to the same timezone as the one specified in
    # the data string (as well as date just not knowing what PT is).
    input="$*"
    if [[ "$input" == *PT* ]] ; then
        export TZ='US/Pacific'
        # Remove PT from the input string.
        input=${input/PT/}
    fi
    date --rfc-3339=seconds -d "$input"
else
    date --rfc-3339=seconds
fi

# This is a pf firewall config, its purpose is to make sure that the system
# uses the OpenVPN connection for everything (this is controlled by
# OpenVPN/Tunnelblick's routing) and not to communicate unencrypted when the
# VPN connection goes down. Therefore, everything on the physical interfaces
# except for ICMP, DHCP, DNS and the VPN connection is blocked.

# original source: https://gist.github.com/scy/8122924

# Define interfaces. I'm on a MacBook Air, so en0 is WiFi and en1 my (optional)
# USB Ethernet adapter.
wifi=en1
ether=en0
vpn=tap0

# TODO: find out if I can connec to my VPN provider over a tun interface
# vpn=tun0

# Default block policy is sending a RST. This allows applications to quickly
# notice that they are not allowed to connect.
set block-policy return

# Don't filter on local loopback or the VPN interface.
set skip on { lo0 $vpn }

# Scrub all incoming packets.
scrub in all

# Don't allow IPv6 at all. This is sad, but IPredator doesn't support it.
# TODO: review if my VPN host does support it (UPDATE: yes, but only if you
# connect with their app, ugh...)
block quick inet6

# By default, don't allow anything on the actual physical links.
block on { $wifi $ether }

# Allow ICMP.
# If you're looking for stealthy ping blocking or the like, this config is not
# for you.
pass quick proto icmp

# Allow DHCP.
# I could probably be more specific than "from any", but didn't find a way to
# specify the link's local network universally. "from $wifi:network" works, but
# "from $ether:network" for example doesn't as long as $ether does not exist.
pass quick on { $wifi $ether } proto udp from any port 67:68

# Allow DNS to Google, although on a rogue network they could still easily
# redirect you to another DNS server.
pass out quick proto udp to { 8.8.8.8, 8.8.4.4, 1.2.3.4, 192.168.179.1, 192.168.1.1 } port 53

# Allow VPN. The destination address specification is a bit loose, but I
# couldn't get a complete list of hosts. Only allowing UDP 1194 (and 1196 as
# used by my provider) should be enough to keep possible risks to a minimum.
#
# Example:
#   pass quick proto udp to { 162.253.128.82, 184.75.214.114, 184.75.214.42, 184.75.215.122, 184.75.220.162, 185.94.192.26, 188.120.238.110, 192.121.82.54, 192.121.82.58, 192.121.82.67, 213.183.54.64, 46.246.93.16, 85.17.136.249, 85.17.136.250, 85.17.136.251, 87.236.215.160, 91.231.84.93, 91.231.84.94, 94.242.255.193 } port { 1194, 1196, 443, 53, 80 }
#
# Generated with:
#   rg --no-filename 'remote \d.*' | awk '{print $2}' | sort -u | paste -sd',' - | sed 's@,@, @g'
#
pass quick proto udp to { 103.16.26.137, 162.253.128.82, 184.75.214.114, 184.75.214.42, 184.75.215.122, 184.75.220.162, 185.61.148.113, 185.61.149.95, 185.86.148.139, 185.86.148.167, 185.86.148.67, 185.86.149.132, 185.86.150.17, 185.86.150.21, 185.86.151.146, 185.9.18.110, 185.94.192.26, 188.120.231.5, 188.120.233.37, 188.120.238.110, 198.144.159.110, 198.144.159.113, 198.144.159.116, 198.144.159.144, 198.144.159.147, 213.183.54.64, 85.17.136.249, 85.17.136.250, 85.17.136.251, 85.17.72.113, 87.236.215.160, 91.231.84.93, 91.231.84.94, 93.158.216.215, 94.242.255.193 } port { 1194, 1196, 443, 53, 80 }

# Allow traffic on the local network
pass quick to 192.168.0.0/16

# Allow broadcasting packets (for Chromecast et al. discovery)
pass quick proto udp from any to 239.255.255.250 port 1900
pass quick proto udp from any to 224.0.0.251 port 5353

#!/usr/bin/env nft -f

define vpn_ips = {
  46.246.93.16,
  46.166.162.68,
  84.247.62.1,
  85.17.136.250,
  85.17.136.249,
  85.17.136.251,
  87.236.215.160,
  212.117.165.18
}

# Sadly, it seems we can't do "flush table ip securevpn" when the table in
# question doesn't exist yet. Until I find a solution to that, I'll flush
# the entire config.
flush ruleset

table ip securevpn {
  chain input {
    type filter hook input priority 0;
    ct state { established, related } counter accept
    ct state invalid counter drop

    # Don't filter on lo or tap0. Do a slower textual match on tap0 because
    # that interface pops in and out of existence, and when it does the
    # filter stops working properly or can't even get loaded.
    meta iif lo accept
    meta iifname tap0 counter accept

    # Allow ICMP.
    ip protocol icmp counter accept

    # Allow Kodi event port and DLNA (UPnP).
    ip saddr { 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 } udp dport {9777, 1900} counter accept

    # Open to the local network (non-public
    # routable addresses only):
    # - SSH (22).
    # - A webserver (80).
    # - The Kodi remote http and jsonrpc interface (8080).
    # - The Kodi remote jsonrpc (legacy) interface (9090).
    # - The Transmission remote interface (9091).
    # - Airplay (36667).
    ip saddr { 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 } tcp dport {ssh, http, http-alt, 9090, 9091, 36667} counter accept

    # Allow mDNS for zeroconf/avahi discovery.
    ip daddr 224.0.0.251 udp dport mdns counter accept

    # Allow DHCPv4 in, this is useful for faster renewals, though not
    # required to make DHCPv4 work.
    udp sport bootps udp dport bootpc counter accept

    # Drop all other traffic.
    counter drop
  }

  # Interesting observation: even though I did not allow DHCP packets
  # through, I was still getting a DHCP assigned address. How come?
  # http://serverfault.com/questions/191390/iptables-and-dhcp-questions has
  # the answer. Put simply: you can't block DHCP with IP filtering as there
  # is no IP to filter on. This does not appears to be the case with DHCPv6.
  chain output {
    type filter hook output priority 0;
    ct state { established, related } accept
    ct state invalid drop

    # Don't filter on lo or tap0. Do a slower textual match on tap0 because that
    # interface pops in and out of existence, and when it does the filter stops
    # working properly or can't even get loaded.
    meta oif lo counter accept
    meta oifname tap0 counter accept

    # Allow ICMP.
    ip protocol icmp counter accept

    # Allow outbound access to the local network and the VPN.
    ip daddr $vpn_ips counter accept
    ip daddr 192.168.1.0/24 counter accept

    udp dport domain counter accept
    tcp dport domain counter accept

    # Allow mDNS for zeroconf/avahi discovery.
    ip daddr 224.0.0.251 udp dport mdns counter accept

    udp sport bootpc udp dport bootps counter accept

    counter drop
  }
}

# Drop all IPv6 traffic that isn't already established. This can be improved
# once I get the IPv6 over VPN story worked out.
table ip6 securevpn {
  chain input {
    type filter hook input priority 0;
    ct state { established, related } accept
    ct state invalid counter packets 0 drop
    meta iif lo accept
    # meta iifname tap0 counter accept

    # Accept neighbour discovery otherwise IPv6 connectivity breaks.
    # icmpv6 type { echo-request } counter drop
    # ip6 nexthdr icmpv6 counter accept

    # Allow receiving on the link-local scope. Both unicast and multicast.
    # ip6 saddr { fe80::/10, ff02::1/16 } counter accept

    # Allow DHCPv6 (though I think one needs to run a separete DHCPv6 client
    # for it to work). This rule may be incomplete, I've never tested it. It
    # might fail because the reponse from this box will be to a unicast
    # address (that of the router), so it might not register as part of an
    # established connection.
    # 
    # I know that link-local addresses will only be assigned out of
    # fe80::/64, but technically it's fe80::/10, so I'll do that.
    # ip6 saddr fe80::/10 udp dport dhcpv6-client counter accept
    # ip6 saddr fe80::/10 tcp dport dhcpv6-client counter accept

    # I found this in someone's config, it shouldn't apply to IPv6 but I'm
    # trying it.
    # udp sport bootps udp dport bootpc counter accept

    counter drop
  }

  chain output {
    type filter hook output priority 0;
    ct state { established, related } accept
    ct state invalid counter drop
    meta oif lo accept
    # meta oifname tap0 counter accept

    # icmpv6 type { echo-reply } counter drop
    # ip6 nexthdr icmpv6 counter accept

    # # Allow sending on the link-local scope. Both unicast and multicast.
    # ip6 daddr { fe80::/10, ff02::1/16 } counter accept

    # # Allow router solicitation requests.
    # ip6 daddr ff02::2 counter accept

    # udp sport bootpc udp dport bootps counter accept

    counter drop
  }
}

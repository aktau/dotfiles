#!/usr/bin/env nft

define vpn_ips = {
  46.166.162.68
}

# Sadly, it seems we can't do "flush table ip securevpn" when the table in
# question doesn't exist yet. Until I find a solution to that, I'll flush
# the entire config.
flush ruleset

table ip securevpn {
  chain input {
    type filter hook input priority 0;
    ct state { established, related } counter packets 0 bytes 0 accept
    ct state invalid counter packets 0 bytes 0 drop

    # Don't filter on lo or tap0. Do a slower textual match on tap0 because
    # that interface pops in and out of existence, and when it does the
    # filter stops working properly or can't even get loaded.
    meta iif lo counter packets 0 bytes 0 accept
    meta iifname tap0 counter packets 0 bytes 0 accept

    # Allow ICMP.
    ip protocol icmp counter packets 0 bytes 0 accept

    # Allow Kodi event port and DLNA (UPnP).
    ip saddr { 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 } udp dport {9777, 1900} counter packets 0 bytes 0 accept

    # Open to the local network (non-public
    # routable addresses only):
    # - SSH (22).
    # - A webserver (80).
    # - The Kodi remote http and jsonrpc interface (8080).
    # - The Kodi remote jsonrpc (legacy) interface (9090).
    # - The Transmission remote interface (9091).
    # - Airplay (36667).
    ip saddr { 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 } tcp dport {ssh, http, http-alt, 9090, 9091, 36667} counter packets 0 bytes 0 accept

    # Allow mDNS for zeroconf/avahi discovery.
    ip daddr 224.0.0.251 udp dport mdns counter packets 0 bytes 0 accept

    # Drop all other traffic.
    counter packets 0 bytes 0 drop
  }

  chain output {
    type filter hook output priority 0;
    ct state { established, related } accept
    ct state invalid drop

    # Don't filter on lo or tap0. Do a slower textual match on tap0 because that
    # interface pops in and out of existence, and when it does the filter stops
    # working properly or can't even get loaded.
    meta oif lo counter packets 0 bytes 0 accept
    meta oifname tap0 counter packets 0 bytes 0 accept

    # Allow ICMP.
    ip protocol icmp counter packets 0 bytes 0 accept

    # Allow outbound access to the local network and the VPN.
    ip daddr $vpn_ips counter packets 0 bytes 0 accept
    ip daddr 192.168.1.0/24 counter packets 0 bytes 0 accept

    udp dport domain counter packets 0 bytes 0 accept
    tcp dport domain counter packets 0 bytes 0 accept

    # Allow mDNS for zeroconf/avahi discovery.
    ip daddr 224.0.0.251 udp dport mdns counter packets 0 bytes 0 accept

    counter packets 0 bytes 0 drop
  }
}

# Drop all IPv6 traffic that isn't already established. This can be improved
# once I get the IPv6 over VPN story worked out.
table ip6 securevpn {
  chain input {
    type filter hook input priority 0;
    ct state { established, related } accept
    ct state invalid drop
    meta iif lo accept

    # Accept neighbour discovery otherwise IPv6 connectivity breaks.
    ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit,  nd-router-advert, nd-neighbor-advert } accept

    counter packets 0 bytes 0 drop
  }

  chain output {
    type filter hook output priority 0;
    ct state { established, related } accept
    ct state invalid drop
    meta oif lo accept
    counter packets 0 bytes 0 drop
  }
}

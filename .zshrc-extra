##########################################################################
# Zsh sensible configuration                                             #
# (https://github.com/hanjianwei/zsh-sensible/blob/master/sensible.zsh). #
##########################################################################

# It's likely I'll be setting EDITOR=nvim somewhere in my zsh, which will
# cause zsh to switch to vi-mode if I re-exec (exec zsh). Prevent this.
bindkey -e

# Keep a very long history.
HISTFILE="$HOME/.zsh_history"
HISTSIZE=500000
SAVEHIST=500000

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_SPACE         # Commands prefixed with space are not recorded.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing non-existent history.
setopt COMPLETE_IN_WORD          # Complete from both ends of a word.
setopt PATH_DIRS                 # Perform path search even on command names with slashes.
setopt TRANSIENTRPROMPT          # Clear the right prompt (RPS1) on command entry (only useful when using themes that actually define RPS1).
setopt PROMPT_SUBST              # Interpret variables/functions every time when rendering a prompt.

unsetopt correct_all             # Disable the extremely annoying auto-correct.
unsetopt CASE_GLOB               # Case-insensitive matching.

# Colors.
# coreutils ls(1) uses LS_COLORS.
export LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:"
# macOS ls(1) uses $LSCOLORS.
export LSCOLORS="Gxfxcxdxbxegedabagacad"
if [[ "$OSTYPE" == darwin* ]]; then
  alias ls="ls -G"
else
  alias ls="ls --color=tty"
fi

zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# Partial-word, and then substring completion.
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Allow arrow selection.
zstyle ':completion:*:*:*:*:*' menu select

# Keybindings
#
# NOTE: In order to reliabibly configure keybinds for your current terminal
# when you can't use the $terminfo array, use <ctrl-V><key-combination> to
# see the raw value.

# Edit the current command in $EDITOR, press <ctrl-X><ctrl-E>. I'm using
# this longish shortcut because it's the same as bash's. Hoping I'll get
# used to it...
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# Make search up and down work, so partially type and hit up/down to find
# relevant stuff. The defaults are (zsh -d -f "bindkey | less"):
# (up|down)-line-or-history, which I like less.
#
# $ man zshzle      # Search for "History Control".
# $ man zshcontrib  # Search for "up-line-or-beginning-search".
autoload -U up-line-or-beginning-search
zle -N up-line-or-beginning-search
bindkey '^[[A' up-line-or-beginning-search    # [UpArrow]

autoload -U down-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '^[[B' down-line-or-beginning-search  # [DownArrow]

# xterm bindings for ctrl-right/left arrow.
bindkey '^[[1;5C' forward-word                # [Ctrl-RightArrow] - move forward one word
bindkey '^[[1;5D' backward-word               # [Ctrl-LeftArrow] - move backward one word

# Apparently my urxvt has the following...
bindkey '^[Oc' forward-word                   # [Ctrl-RightArrow] - move forward one word
bindkey '^[Od' backward-word                  # [Ctrl-LeftArrow] - move backward one word

# iTerm2, bind fn-right/left arrow.
bindkey '^[[H' backward-word
bindkey '^[[F' forward-word

##############################
# Random user configuration. #
##############################

# Aliases

alias gl='git pull'
alias l='ls -lah'
alias ll='ls -lh'
alias grep='grep --color=auto'
alias stamp="date +'%s'"
alias luajit="rlwrap luajit"
alias rg='rg -S'                              # Default to smart-case.

# Misc

# Allow expanding aliases in zsh. Press ctrl-alt-e, just like in Bash.
expand-aliases() {
  unset 'functions[_expand-aliases]'
  functions[_expand-aliases]=$BUFFER
  (($+functions[_expand-aliases])) &&
    BUFFER=${functions[_expand-aliases]#$'\t'} &&
    CURSOR=$#BUFFER
}
zle -N expand-aliases
bindkey '\e^E' expand-aliases

export LESS="-R -S"

# Set manpager to nvim if possible. Highlighted linkable manpages!
if command -v nvim >/dev/null 2>&1 ; then
  export MANPAGER="nvim '+set ft=man' -"
fi

# Use ag to supply fzf with filenames instead of find, it's faster.
export FZF_DEFAULT_COMMAND="ag -i --nocolor --nogroup --hidden \
  --ignore .git \
  --ignore .svn \
  --ignore .hg \
  --ignore .DS_Store \
  -g ''"

# runargs is basically the same as xargs(1) but implemented as a shell
# function so you don't have ugly long-running xargs processes all over the
# place. Forces stdin to be the TTY (because the real stdin are the
# filenames, of course).
runargs() {
  local -a args
  if [ -n "$ZSH_VERSION" ] ; then
    # Stupid hack to get Vim's sh filetype to not barf on the quotes. Which
    # I require because I want shellcheck to run on all my shell files, but
    # setting the zsh filetype disables shellcheck because shellcheck
    # removed support for zsh...
    local in=/dev/stdin
    args=(${(@f)"$(<$in)"})
  elif [ -n "$BASH_VERSION" ] ; then
    readarray -t args
  else
    return 1
  fi

  (( ${#args[@]} == 0 )) && return 0

  "$@" "${args[@]}" </dev/tty
}

# vimin opens files passed on stdin in $EDITOR (in splits, so needs vimlike).
vimin() {
  runargs "${EDITOR:-vim}" -O
}

# Fuzzy cd, powered by fzf. The first argument determines the depth of the
# fuzzy search. 0 is the default and search the current directory only, 1 is
# one level deeper, et cetera.
cdf() {
  local depth=${1:-1}
  cd "$(find . -mindepth 0 -maxdepth "$depth" -type d -printf '%P\n' 2>/dev/null | fzf --select-1 --exit-0)"
}

# Recursive fuzzy cd without limit, uses a depth-first search so that even
# on very slow filesystems you can navigate piecemeal. This requires bfs(1).
fd() {
  local dir
  dir="$(bfs . -type d -mindepth 1 2>/dev/null | fzf -0 -q "$*")" || {
    return 1
  }
  if [ -z "$dir" ] ; then
    echo "no more directories to enter" >&2
    return 1
  fi
  cd "$dir"
}

# fdr is a souped up version of fd that keeps going until you actually quit.
# Good for drilling down into deep hierarchies where even bfs(1) has a
# problem.
#
# Suppose you need to go 6 folders deep, but after 3 the hierarchy because
# too unwieldy and it gets progressively slower: then just select the
# correct folder in the 3rd level and fdr will cd into that and rerun fd.
fdr() {
    while fd "$@" ; do
      # Empty arguments.
      set -- ""
    done
}

# fe <file|pattern>... - Open the selected file(s) with the default editor
fe() {
  declare -al query
  declare -al paths

  for arg ; do
    if [[ "$arg" = */ ]] ; then
      paths+=("$arg")
    else
      query+=("$arg")
    fi
  done

  ag -g '' "${paths[@]}" | fzf -0 -1 -m --query="${query[@]}" | vimin
}

# vimp opens the argument if it can be found your $PATH.
vimp() {
  which "$1" | vimin
}

# fh - repeat history
fh() {
  # If stdout is a TTY, fuzzy select. If not, just output all history.
  if [ -t 1 ] ; then
    print -z $(fc -ln 1 | fzf --tac -0 -1 -q "$*")
  else
    fc -ln 1
  fi
}

# fkill - kill process
fkill() {
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ] ; then
    kill -${1:-9} "$pid"
  fi
}

# mkcd creates and cd's into a directory.
mkcd() {
  [ -n "$1" ] && mkdir -p "$@" && cd "$1"
}

# use trusty OSX names for clipboard interaction
if [[ "$OSTYPE" == 'linux-gnu' ]] ; then
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
fi

# Act like pbpaste if stdin is a terminal, otherwise act like pbcopy.
clip() {
  [ -t 0 ] && pbpaste || pbcopy
}

# Print the header (the first line of input) and then run the specified
# command on the body (the rest of the input) use it in a pipeline, e.g. ps
# | body grep somepattern
body() {
  IFS= read -r header
  printf '%s\n' "$header"
  "$@"
}

# Enhanced less invocation that will keep a single header line around in the
# prompt.
hless() {
  IFS= read -r header
  less -PM"$header" -M
}

# Searches text for a string but highlights instead of filtering. If you
# want to combine this with a pager, it can be piped to less because it has
# --color=always. Alternatively, one can use less -p PATTERN.
greph() {
  local pat="$1"
  shift
  grep --color=always -E "$pat|$" $@
}

# Takes a single (!) AWK condition with no body, and highlights lines that
# match.
awkh() {
  awk "$@"'{ print "\033[1;31m" $0 "\033[0m " ; next}1'
}

# quickly find folders or files in a subdirectory
fname() {
  ${FIND:-find} . -iname "*$@*"
}

# Quickly find folders.
fdir() {
  ${FIND:-find} . -type d -iname "*$@*"
}

# quickly find folders or files in a subdirectory
fname0() {
  find . -iname "*$@*" -print0
}

# Quickly find folders or files by regex in a subdirectory.
fnamere() {
  (
    # Make '*' glob match hidden files as well.
    setopt globdots
    # Pass '*' glob to find(1) so it matches dotfiles like .bashrc as well
    # but doesn't print nor regex match the leading './'. This makes it
    # easier to do an anchoring match like '^[0-9]+'.
    find * -regextype posix-extended -regex "$@"
  )
}

# execute this to try to import any running ssh-agent sessions
ssh-reagent() {
  for agent in /tmp/ssh-*/agent.*; do
    export SSH_AUTH_SOCK=$agent
    if ssh-add -l 2>&1 > /dev/null; then
      echo "Found working SSH Agent:"
      ssh-add -l
      return
    fi
  done

  echo "Cannot find ssh agent - maybe you should reconnect and forward it?"
}

# Evaluate something in lua.
le() {
  # If no arguments are given, evaluate stdin as a lua expression. We can't
  # use "lua -" as specified in the man page because that would avoid
  # printing the result if the user didn't specifically call print(),
  # write() or others. It's cumbersome to type those all the time, so do it
  # by default.
  local expr
  (( $# == 0 )) && expr="$(</dev/stdin)" || expr="$*"

  # Dirty hack to force printing of the passed in expression.
  case "$expr" in
    *print*|*write*) ;;
    *) expr="print($expr)" ;;
  esac

  eval "$(luarocks path)" &&
    LUA_INIT="@$HOME/.lua/init.lua" luajit -e "$expr"
}

# Use Lua as a UNIX filter. By default, if no "print" or "write" substrings
# are found in the passed Lua code, :each(print) will be appended. This
# prints out the result of the operators/reducers/... to stdout.
#
# When the required operation is really simple: no Lua pipelines, just a
# single operation, lefs(1) can be used with less typing.
#
# Usage: lef <lua>
# Examples:
#
#   # Add 5 to every line and print.
#   ( echo 2 ; echo 3 ) | lef "map(function(x) return x + 5 end)"
#
#   # Filter lines that are not 3.
#   ( echo 2 ; echo 3 ; echo 4) | lef "filter(function(x) return x ~= '3' end)"
#
#   # If you want to compare to the number 3 instead of the string "3", the
#   # input needs to be converted to a number with tonumber() or adding 0.
#   ( echo 2 ; echo 3 ; echo 4) | lef "filter(function(x) return x+0 ~= 3 end)"
lef() {
  # Add each(print) at the end if there's no print or io.write in the
  # command.
  local expr="$@"
  case "$expr" in
    *print*|*write*) ;;
    *) expr="${expr}:each(print)" ;;
  esac

  eval "$(luarocks path)" &&
    LUA_INIT="@$HOME/.lua/init.lua" luajit -e \
    "fun.wrap(stiter(io.lines())):$expr"
}

# Simpler invocation of lef(1) when only one operation is necessary.
# Arguments are denoted by x[1], x[2], ...
#
# Example:
#
#   # Add 5 to every line and print.
#   ( echo '2 5' ; echo '3 6' ; echo '4 7' ) | lefs "x[1] + 5"
#
# TODO(aktau): Implement string splitting.
lefs() {
  eval "$(luarocks path)" &&
    LUA_INIT="@$HOME/.lua/init.lua" luajit -e \
    "fun.wrap(stiter(io.lines())):map(function(...) local x = table.pack(...) ; return $@ end):each(print)"
}

# Start a luajit interpreter with some libraries preloaded.
lj() {
  # Add local and global rocks to the lua search path, then preload those
  # libraries and some other helper code from init.lua.
  eval "$(luarocks path)" &&
    luajit -i $HOME/.lua/init.lua --examples
}

# Run git-diff on files outside of a repository, to be able to make use of
# its superior diffing ability. Takes care of replacing pipe arguments with
# temporary files, because git diff chokes on those. Includes some handy git
# diff options (that I like) by default.
gdiff() {
    (
    # git diff doesn't accept pipes, so do a temporary copy of any pipes
    # passed as input.
    #
    # Iterating over the positional arguments actually iterates over a copy
    # of the positional arguments in ksh, bash and zsh.
    export TMPDIR=$(mktemp -d)
    trap "rm -rf $TMPDIR" EXIT
    for arg; do
      case "$arg" in
        -*) ;;
        *)
          # Copy the positional argument to a temporary file if it's a pipe.
          if [ -p "${arg}" ] ; then
            f="$(mktemp)" || exit
            cp "${arg}" "$f"
            arg="$f"
          fi
          ;;
      esac
      set -- "$@" "${arg}"
      shift
    done

    git diff --patience --word-diff --no-index "$@"
    )
}

# git and github related functions/aliases

# Start working on a pull request, this requires a .git/user-repo file
# containing the string "user/repository"
pr() {
    if [[ ! -r .git/user-repo ]]; then
        echo "Need to setup user/repo" >&2
        return 1
    fi
    local user_repo=$(< .git/user-repo)
    local pr_num=$1
    if [[ -z $pr_num ]]; then
        echo "Need the pull request number" >&2
        return 1
    fi
    local branch=merge-pr-$pr_num
    if [[ -e .git/refs/heads/$branch ]]; then
        echo "Already working on pull request $pr_num, delete branch '$branch' and try again" >&2
        return 1
    fi
    git checkout -b $branch
    if ! curl -L "https://github.com/$user_repo/pull/$pr_num.patch" 2> /dev/null | git am --3way ; then
        echo "Downloading patch or patching failed, please resolve manually"
        git am --abort
        git checkout master
        git branch -D $branch
    fi
}

# Finish working on a pull request, besides the .git/user-repo file,
# this requires a .git/ghtok file containing the oauth token for accessing the
# repository
mpr() {
    if [[ ! -r .git/user-repo ]]; then
        echo "Need to setup user/repo" >&2
        return 1
    fi
    local user_repo=$(< .git/user-repo)

    local ghtok=
    if [[ -r .git/ghtok ]]; then
        ghtok=$(< .git/ghtok)
    elif [[ -n "$GITHUB_TOKEN" ]]; then
        echo "Couldn't find github token at .git/ghtok, using env \
            variable GITHUB_TOKEN" >&2
        ghtok="$GITHUB_TOKEN"
    else
        echo "Couldn't find neither .git/ghtok nor GITHUB_TOKEN, exiting" >&2
        return 1
    fi

    local pr_num=$1
    if [[ -z $pr_num ]]; then
        echo "Need the pull request number" >&2
        return 1
    fi

    local branch=merge-pr-$pr_num
    if [[ ! -e .git/refs/heads/$branch ]]; then
        echo "Not working on $pr_num" >&2
        return 1
    fi
    (
    set -e
    echo "Will push commits and comment/close on PR $pr_num"
    git checkout master
    echo "Retrieving the PR title..."
    local sed="sed"
    if [[ `uname` == 'Darwin' ]]; then
        export sed="gsed"
    fi

    # check if this is a prefixed PR ([RFC], [WIP], ...)
    local pr_meta="$(curl https://api.github.com/repos/$user_repo/issues/$pr_num 2> /dev/null)"
    local pr_title=
    if egrep -q '"\[\w+\]' <<< $pr_meta; then
        local pr_title="$($sed -n -e 's/.*"title":\s\+"\([^"]\+\)".*/\1/g' -e 's/^\[\(\w\+\)]\s*\(.\+\)/\2/p' <<< $pr_meta)"
    else
        local pr_title="$($sed -n -e 's/.*"title":\s\+"\([^"]\+\)".*/\1/p' <<< $pr_meta)"
    fi

    local merge_title="Merge #$pr_num '$pr_title'"
    local merge_title_new=
    local max_chars=72

    # check if the merge commit title doesn't surpass 80 characters
    local merge_title_chars=$(wc -c <<< "$merge_title" | tr -d ' ')
    while [[ $merge_title_chars -gt $max_chars ]]; do
      echo "$merge_title has $merge_title_chars characters, the maximum is $max_chars, please type a shorter title:"
      echo -n "Merge #$pr_num '<fill this in>': "
      read merge_title_new
      local merge_title="Merge #$pr_num '$merge_title_new'"
      local merge_title_chars=$(wc -c <<< "$merge_title" | tr -d ' ')
    done

    git merge --no-ff -m "$merge_title" $branch
    git branch -D $branch
    git log --graph --decorate --pretty=oneline --abbrev-commit --all --max-count=20
    echo "Continue with the merge? [y/N]"
    local confirm
    read confirm
    if [[ $confirm != "y" ]]; then
        echo "Merge cancelled" >&2
        git reset --hard HEAD~1
        exit 1
    fi
    git push
    curl \
        -X POST \
        -H "Authorization: token $ghtok"  \
        -d '{"body": ":+1: merged, thanks"}' \
        "https://api.github.com/repos/$user_repo/issues/$pr_num/comments" > /dev/null
    curl \
        -X PATCH \
        -H "Authorization: token $ghtok"  \
        -d '{"state": "closed"}' \
        "https://api.github.com/repos/$user_repo/issues/$pr_num" > /dev/null
    echo "Done"
    )
}

# Take csv input, output aligned columns (with missing fields filled out as
# NULL).
csv2col() {
  # 1. (csvtool) Replace comma with field separator values, to reduce
  #    false-postive columns (it's very unlikely that input text contains
  #    the field separator).
  # 2. (awk) Fill empty rows. Determine the number columns from the first
  #    column.
  # 3. (column) Print in neat columns.
  csvtool cat -u $'\f' - |
    awk -F $'\f' '
      BEGIN { OFS = FS }
      NR == 1 { ncols = NF }
      {
        for (i = 0 ; i <= ncols ; i++ ) {
          if ($i == "") $i = "NULL"
        }
        print
      }
    ' | column -ts $'\f'
}

# Enable OSC 52 clipboard integration.
set -g set-clipboard on

# There are two important TERM values: the outer and the inner one [1,2]. To make
# 24-bit colour work, we need:
#
#  1. tmux to recognize that the outer term is capable of 24-bit colours. We can
#     enforce this using terminal-overrides if the Tc bit isn't set on the outer
#     terminal (for example: xterm-256color). In the ideal world, we'd be able
#     to let tmux force this override whenever the $COLORTERM environment
#     variable is set. Sadly the ",*:Tc" override doesn't seem to be respected.
#  2. Applications inside tmux need to reocnigze the inner terminal (e.g.:
#     tmux-256color) as supporting 24-bit. Sadly, this is not the case for
#     either tmux-256color or screen-256color (either of which is required for
#     tmux). The solution is the new "tmux-direct" terminal, but that was only
#     upstreamed in 2020-10 (see TODO). Luckily, some applications take
#     $COLORTERM as an override (like Neovim), so it's not too bad.
#
# [1]: https://github.com/tmux/tmux/issues/696
# [2]: https://unix.stackexchange.com/a/568263
# [3]: https://github.com/tmux/tmux/issues/2370
set -g default-terminal "tmux-direct"
# Tell tmux that if we have TERM=xterm-256color, it is capable of 24-bit
# regardless of what terminfo says. This is a bit tricky because (e.g.) macOS
# terminal, iterm2 and hterm all set xterm-256color by default. Yet, macOS
# terminal does not support 24-bit. Ideally, we'd base this decision on the
# presence of the $COLORTERM environment variable, which is properly set (or not
# set) for all relevant terminals.
#
# I'm not entirely sure what tmux behaviour changes when we set this override.
# I've tested that in cases where tmux is missing Tc in the outer terminal (see
# below), it will still forward 24-bit codes just fine.
#
# Note that this override does not [2 above] change any capability of
# tmux-256color, which is the terminal that applications within tmux will see.
#
# Without this override, in iTerm2, we get:
#
#  $ tmux info | grep Tc
#    206: Tc: [missing]
#
# With this override, we'll get:
#
#  $ tmux info | grep Tc
#    206: Tc: (flag) true
set -ga terminal-overrides ",xterm-256color:Tc"
set -ga terminal-overrides ",hterm-256color:Tc"
set -g history-limit 30000

set -g set-titles on                        # set terminal title
set -g set-titles-string '#W ‚óè #h'

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# 24 hour clock
setw -g clock-mode-style 24

# Neovim does things correctly, so it must suffer:
# https://github.com/neovim/neovim/issues/2035.
set -sg escape-time 10

# In recent tmux versions (I estimate 2.4+), there:
#
# - Is no more need to use reattach-to-user-namespace(1) when using iTerm2
#   option "Applications in terminal may use clipboard". In 2.6+, not even that
#   will be required anymore, as tmux will include that functionality natively.
# - Copying works cross application without setting up copy-pipe to
#   pbcopy(1)/xsel(1). This requires the terminal to be able to write to the
#   clipboard (see OSC 52 clipboard control). urxvt on linux does *not* support
#   this. Which means that urxvt still requires copy-pipe instead of
#   copy-selection-*, or a Perl extension
#   (example:
#   https://github.com/parantapa/dotfiles/blob/master/urxvt-perl/52-osc). Also
#   see
#   https://github.com/tmux/tmux/wiki/FAQ#how-do-i-copy-a-selection-from-tmux-to-the-systems-clipboard.

# Setup 'v' to begin visual selection as in Vim, and 'y' to yank.
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-selection-and-cancel

source-file ~/.tmux.gruvbox.theme
